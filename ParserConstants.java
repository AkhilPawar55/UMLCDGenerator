/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ZERO = 10;
  /** RegularExpression Id. */
  int ONEDIGIT = 11;
  /** RegularExpression Id. */
  int NUM = 12;
  /** RegularExpression Id. */
  int MODULE = 13;
  /** RegularExpression Id. */
  int THIS = 14;
  /** RegularExpression Id. */
  int OPEN = 15;
  /** RegularExpression Id. */
  int UNIV = 16;
  /** RegularExpression Id. */
  int INT = 17;
  /** RegularExpression Id. */
  int SEQINT = 18;
  /** RegularExpression Id. */
  int AS = 19;
  /** RegularExpression Id. */
  int PRIVATE = 20;
  /** RegularExpression Id. */
  int EXACTLY = 21;
  /** RegularExpression Id. */
  int LBRACKET = 22;
  /** RegularExpression Id. */
  int RBRACKET = 23;
  /** RegularExpression Id. */
  int COMMA = 24;
  /** RegularExpression Id. */
  int STROKE = 25;
  /** RegularExpression Id. */
  int EQSIGN = 26;
  /** RegularExpression Id. */
  int INCLUSION = 27;
  /** RegularExpression Id. */
  int LESSER = 28;
  /** RegularExpression Id. */
  int GREATER = 29;
  /** RegularExpression Id. */
  int LESSEROREQUAL = 30;
  /** RegularExpression Id. */
  int GREATEROREQUAL = 31;
  /** RegularExpression Id. */
  int ARROW = 32;
  /** RegularExpression Id. */
  int SOME = 33;
  /** RegularExpression Id. */
  int ONE = 34;
  /** RegularExpression Id. */
  int LONE = 35;
  /** RegularExpression Id. */
  int SET = 36;
  /** RegularExpression Id. */
  int OR = 37;
  /** RegularExpression Id. */
  int AND = 38;
  /** RegularExpression Id. */
  int DOUBLEIMPLIES = 39;
  /** RegularExpression Id. */
  int IFF = 40;
  /** RegularExpression Id. */
  int IMPLIES = 41;
  /** RegularExpression Id. */
  int PLUS = 42;
  /** RegularExpression Id. */
  int MINUS = 43;
  /** RegularExpression Id. */
  int PLUSPLUS = 44;
  /** RegularExpression Id. */
  int DOMAINRESTRICTION = 45;
  /** RegularExpression Id. */
  int RANGERESTRICTION = 46;
  /** RegularExpression Id. */
  int DOT = 47;
  /** RegularExpression Id. */
  int LEFTSHIFT = 48;
  /** RegularExpression Id. */
  int RIGHTSHIFT = 49;
  /** RegularExpression Id. */
  int UNSIGNEDRIGHTSHIFT = 50;
  /** RegularExpression Id. */
  int BANG = 51;
  /** RegularExpression Id. */
  int NOT = 52;
  /** RegularExpression Id. */
  int NO = 53;
  /** RegularExpression Id. */
  int SEQ = 54;
  /** RegularExpression Id. */
  int POUND = 55;
  /** RegularExpression Id. */
  int TILDE = 56;
  /** RegularExpression Id. */
  int REFLEXIVETRASITIVECLOSURE = 57;
  /** RegularExpression Id. */
  int NONREFLEXIVETRASITIVECLOSURE = 58;
  /** RegularExpression Id. */
  int DISJOINT = 59;
  /** RegularExpression Id. */
  int ALL = 60;
  /** RegularExpression Id. */
  int SUM = 61;
  /** RegularExpression Id. */
  int COLON = 62;
  /** RegularExpression Id. */
  int BAR = 63;
  /** RegularExpression Id. */
  int LCURLY = 64;
  /** RegularExpression Id. */
  int RCURLY = 65;
  /** RegularExpression Id. */
  int LET = 66;
  /** RegularExpression Id. */
  int IDEN = 67;
  /** RegularExpression Id. */
  int LPAREN = 68;
  /** RegularExpression Id. */
  int RPAREN = 69;
  /** RegularExpression Id. */
  int AT = 70;
  /** RegularExpression Id. */
  int NONE = 71;
  /** RegularExpression Id. */
  int ELSE = 72;
  /** RegularExpression Id. */
  int FACT = 73;
  /** RegularExpression Id. */
  int ASSERT = 74;
  /** RegularExpression Id. */
  int FUNCTION = 75;
  /** RegularExpression Id. */
  int PREDICATE = 76;
  /** RegularExpression Id. */
  int RUN = 77;
  /** RegularExpression Id. */
  int CHECK = 78;
  /** RegularExpression Id. */
  int FOR = 79;
  /** RegularExpression Id. */
  int BUT = 80;
  /** RegularExpression Id. */
  int EXPECT = 81;
  /** RegularExpression Id. */
  int ENUM = 82;
  /** RegularExpression Id. */
  int SIGNATURE = 83;
  /** RegularExpression Id. */
  int ABSTRACT = 84;
  /** RegularExpression Id. */
  int EXTENDS = 85;
  /** RegularExpression Id. */
  int ID = 86;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int ML_COMMENT_STATE = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 4>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "\"0\"",
    "\"1\"",
    "<NUM>",
    "\"module\"",
    "\"this\"",
    "\"open\"",
    "\"univ\"",
    "\"Int\"",
    "\"seq/Int\"",
    "\"as\"",
    "\"private\"",
    "\"exactly\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\"/\"",
    "\"=\"",
    "\"in\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"->\"",
    "\"some\"",
    "\"one\"",
    "\"lone\"",
    "\"set\"",
    "<OR>",
    "<AND>",
    "\"<=>\"",
    "\"iff\"",
    "<IMPLIES>",
    "\"+\"",
    "\"-\"",
    "\"++\"",
    "\"<:\"",
    "\":>\"",
    "\".\"",
    "\"<<\"",
    "\">>\"",
    "\">>>\"",
    "\"!\"",
    "\"not\"",
    "\"no\"",
    "\"seq\"",
    "\"#\"",
    "\"~\"",
    "\"*\"",
    "\"^\"",
    "\"disj\"",
    "\"all\"",
    "\"sum\"",
    "\":\"",
    "\"|\"",
    "\"{\"",
    "\"}\"",
    "\"let\"",
    "\"iden\"",
    "\"(\"",
    "\")\"",
    "\"@\"",
    "\"none\"",
    "\"else\"",
    "\"fact\"",
    "\"assert\"",
    "\"fun\"",
    "\"pred\"",
    "\"run\"",
    "\"check\"",
    "\"for\"",
    "\"but\"",
    "\"expect\"",
    "\"enum\"",
    "\"sig\"",
    "\"abstract\"",
    "\"extends\"",
    "<ID>",
  };

}
