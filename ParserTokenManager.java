/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
import java.util.*;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2000004L) != 0L)
            return 0;
         if ((active0 & 0x8000000000000000L) != 0L)
            return 6;
         if ((active0 & 0x4000000L) != 0L)
            return 16;
         if ((active0 & 0x1000000000080000L) != 0L || (active1 & 0x100400L) != 0L)
         {
            jjmatchedKind = 86;
            return 13;
         }
         if ((active0 & 0x10008000000L) != 0L || (active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 86;
            return 23;
         }
         if ((active0 & 0x2870001a00376000L) != 0L || (active1 & 0x2ffb84L) != 0L)
         {
            jjmatchedKind = 86;
            return 26;
         }
         if ((active0 & 0x800L) != 0L)
            return 5;
         if ((active0 & 0x400008000L) != 0L)
         {
            jjmatchedKind = 86;
            return 8;
         }
         return -1;
      case 1:
         if ((active0 & 0x3840011e0037e000L) != 0L || (active1 & 0x3ffb0cL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 86;
               jjmatchedPos = 1;
            }
            return 26;
         }
         if ((active0 & 0x30000008080000L) != 0L || (active1 & 0x480L) != 0L)
            return 26;
         return -1;
      case 2:
         if ((active0 & 0x3050011400060000L) != 0L || (active1 & 0x9a804L) != 0L)
            return 26;
         if ((active0 & 0x800000a0031e000L) != 0L || (active1 & 0x365788L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 86;
               jjmatchedPos = 2;
            }
            return 26;
         }
         return -1;
      case 3:
         if ((active0 & 0x800000a0001c000L) != 0L || (active1 & 0x41388L) != 0L)
            return 26;
         if ((active0 & 0x302000L) != 0L || (active1 & 0x324400L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 3;
            return 26;
         }
         return -1;
      case 4:
         if ((active1 & 0x4000L) != 0L)
            return 26;
         if ((active0 & 0x302000L) != 0L || (active1 & 0x320400L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
            return 26;
         }
         return -1;
      case 5:
         if ((active0 & 0x300000L) != 0L || (active1 & 0x300000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 5;
            return 26;
         }
         if ((active0 & 0x2000L) != 0L || (active1 & 0x20400L) != 0L)
            return 26;
         return -1;
      case 6:
         if ((active0 & 0x300000L) != 0L || (active1 & 0x200000L) != 0L)
            return 26;
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 6;
            return 26;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 8;
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L);
      case 33:
         return jjStopAtPos(0, 51);
      case 35:
         return jjStopAtPos(0, 55);
      case 40:
         return jjStopAtPos(0, 68);
      case 41:
         return jjStopAtPos(0, 69);
      case 42:
         return jjStopAtPos(0, 57);
      case 43:
         jjmatchedKind = 42;
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 24);
      case 45:
         jjmatchedKind = 43;
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 46:
         return jjStopAtPos(0, 47);
      case 47:
         jjmatchedKind = 25;
         return jjMoveStringLiteralDfa1_0(0x4L, 0x0L);
      case 48:
         return jjStopAtPos(0, 10);
      case 49:
         return jjStartNfaWithStates_0(0, 11, 5);
      case 58:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 60:
         jjmatchedKind = 28;
         return jjMoveStringLiteralDfa1_0(0x1208040000000L, 0x0L);
      case 61:
         return jjStartNfaWithStates_0(0, 26, 16);
      case 62:
         jjmatchedKind = 29;
         return jjMoveStringLiteralDfa1_0(0x6000080000000L, 0x0L);
      case 64:
         return jjStopAtPos(0, 70);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 22);
      case 93:
         return jjStopAtPos(0, 23);
      case 94:
         return jjStopAtPos(0, 58);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1000000000080000L, 0x100400L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x260100L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8a00L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x10008000000L, 0x8L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x4L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x30000000000000L, 0x80L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x400008000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x1000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x2040001200040000L, 0x80000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 64);
      case 124:
         return jjStartNfaWithStates_0(0, 63, 6);
      case 125:
         return jjStopAtPos(0, 65);
      case 126:
         return jjStopAtPos(0, 56);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      case 42:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(1, 2);
         break;
      case 43:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         break;
      case 58:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         break;
      case 60:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         break;
      case 61:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L);
      case 62:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x40001000040000L, active1, 0x4L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0x80000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0x100L);
      case 110:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 27, 26);
         return jjMoveStringLiteralDfa2_0(active0, 0x400030000L, active1, 0x40000L);
      case 111:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x10000a00002000L, active1, 0x8080L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0x1000L);
      case 115:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0x12800L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0x220000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(2, 39);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(2, 50);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L, active1, 0L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 26);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0x5008L);
      case 102:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 40, 26);
         break;
      case 103:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 83, 26);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x114000L, active1, 0L);
      case 108:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 60, 26);
         break;
      case 109:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 61, 26);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0L);
      case 110:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 75, 26);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 77, 26);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0x80L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000L);
      case 113:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L, active1, 0L);
      case 114:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 79, 26);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0x100500L);
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 26);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 26);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 52, 26);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 26);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 80, 26);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0x4000L);
      case 100:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 76, 26);
         break;
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 26);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 26);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 71, 26);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 26);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x220400L);
      case 106:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 59, 26);
         break;
      case 109:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 82, 26);
         break;
      case 110:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 26);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 67, 26);
         break;
      case 115:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 26);
         break;
      case 116:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 26);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L, active1, 0L);
      case 118:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 26);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000L);
      case 107:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 78, 26);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100400L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 26);
         break;
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L, active1, 0L);
      case 116:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 26);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 81, 26);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 26);
         break;
      case 115:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 85, 26);
         break;
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(6, 18);
         break;
      case 121:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 116:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 84, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, 0L, active1);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 27;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 8:
               case 26:
                  if ((0x3ff008000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(26);
                  break;
               case 13:
                  if ((0x3ff008000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(26);
                  break;
               case 23:
                  if ((0x3ff008000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(26);
                  break;
               case 2:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     jjCheckNAdd(5);
                  }
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 38)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 0:
                  if (curChar != 47)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 48 && kind > 12)
                     kind = 12;
                  break;
               case 4:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(5);
                  break;
               case 10:
                  if (curChar == 38 && kind > 38)
                     kind = 38;
                  break;
               case 11:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 15:
                  if (curChar == 38 && kind > 38)
                     kind = 38;
                  break;
               case 16:
                  if (curChar == 62 && kind > 41)
                     kind = 41;
                  break;
               case 17:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 8:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjCheckNAdd(26);
                  }
                  if (curChar == 114)
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  break;
               case 13:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjCheckNAdd(26);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 23:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjCheckNAdd(26);
                  }
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 2:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjCheckNAdd(26);
                  }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 6;
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 1:
                  if (kind > 1)
                     kind = 1;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 6:
                  if (curChar == 124 && kind > 37)
                     kind = 37;
                  break;
               case 7:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 12:
                  if (curChar == 100 && kind > 38)
                     kind = 38;
                  break;
               case 14:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 18:
                  if (curChar == 115 && kind > 41)
                     kind = 41;
                  break;
               case 19:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 24:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(26);
                  break;
               case 26:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(26);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 27 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x8L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(1, 3);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, "\60", "\61", null, 
"\155\157\144\165\154\145", "\164\150\151\163", "\157\160\145\156", "\165\156\151\166", "\111\156\164", 
"\163\145\161\57\111\156\164", "\141\163", "\160\162\151\166\141\164\145", "\145\170\141\143\164\154\171", 
"\133", "\135", "\54", "\57", "\75", "\151\156", "\74", "\76", "\74\75", "\76\75", 
"\55\76", "\163\157\155\145", "\157\156\145", "\154\157\156\145", "\163\145\164", null, 
null, "\74\75\76", "\151\146\146", null, "\53", "\55", "\53\53", "\74\72", "\72\76", 
"\56", "\74\74", "\76\76", "\76\76\76", "\41", "\156\157\164", "\156\157", 
"\163\145\161", "\43", "\176", "\52", "\136", "\144\151\163\152", "\141\154\154", 
"\163\165\155", "\72", "\174", "\173", "\175", "\154\145\164", "\151\144\145\156", "\50", 
"\51", "\100", "\156\157\156\145", "\145\154\163\145", "\146\141\143\164", 
"\141\163\163\145\162\164", "\146\165\156", "\160\162\145\144", "\162\165\156", "\143\150\145\143\153", 
"\146\157\162", "\142\165\164", "\145\170\160\145\143\164", "\145\156\165\155", 
"\163\151\147", "\141\142\163\164\162\141\143\164", "\145\170\164\145\156\144\163", null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "ML_COMMENT_STATE",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffc01L, 0x7fffffL, 
};
static final long[] jjtoSkip = {
   0x3feL, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[27];
static private final int[] jjstateSet = new int[54];
static protected char curChar;
/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 27; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 4)
       {
          jjmatchedKind = 4;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
